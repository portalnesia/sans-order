diff --git a/node_modules/@strapi/database/lib/entity-manager.js b/node_modules/@strapi/database/lib/entity-manager.js
index 0233bb1..e5f35bb 100644
--- a/node_modules/@strapi/database/lib/entity-manager.js
+++ b/node_modules/@strapi/database/lib/entity-manager.js
@@ -154,6 +154,18 @@ const createEntityManager = db => {
       return result;
     },
 
+    async sum(uid, params,field='*') {
+      const res = await this.createQueryBuilder(uid)
+        .init(_.pick(['_q', 'where', 'filters'], params))
+        .sum(field)
+        .first()
+        .execute();
+
+      const result = Number(res.sum);
+
+      return result;
+    },
+
     async create(uid, params = {}) {
       const states = await db.lifecycles.run('beforeCreate', uid, { params });
 
diff --git a/node_modules/@strapi/database/lib/entity-repository.js b/node_modules/@strapi/database/lib/entity-repository.js
index b0b7054..2610a94 100644
--- a/node_modules/@strapi/database/lib/entity-repository.js
+++ b/node_modules/@strapi/database/lib/entity-repository.js
@@ -83,6 +83,10 @@ const createRepository = (uid, db) => {
       return db.entityManager.count(uid, params);
     },
 
+    sum(params,fields) {
+      return db.entityManager.sum(uid, params,fields);
+    },
+
     attachRelations(id, data) {
       return db.entityManager.attachRelations(uid, id, data);
     },
diff --git a/node_modules/@strapi/database/lib/index.d.ts b/node_modules/@strapi/database/lib/index.d.ts
index 726b910..96ea888 100644
--- a/node_modules/@strapi/database/lib/index.d.ts
+++ b/node_modules/@strapi/database/lib/index.d.ts
@@ -48,6 +48,11 @@ interface FindParams<T> {
   limit?: number;
   offset?: number;
   orderBy?: // TODO: add relations
+  | Sortables<T>
+    | Sortables<T>[]
+    | { [K in Sortables<T>]?: Direction }
+    | { [K in Sortables<T>]?: Direction }[];
+  groupBy?: // TODO: add relations
   | Sortables<T>
     | Sortables<T>[]
     | { [K in Sortables<T>]?: Direction }
@@ -76,20 +81,19 @@ interface Pagination {
 }
 
 interface PopulateParams {}
-interface EntityManager {
-  findOne<K extends keyof AllTypes>(uid: K, params: FindParams<AllTypes[K]>): Promise<any>;
-  findMany<K extends keyof AllTypes>(uid: K, params: FindParams<AllTypes[K]>): Promise<any[]>;
-
-  create<K extends keyof AllTypes>(uid: K, params: CreateParams<AllTypes[K]>): Promise<any>;
+export interface EntityManager {
+  findOne<K extends keyof AllTypes>(uid: K, params: FindParams<AllTypes[K]>): Promise<AllTypes[K]>;
+  findMany<K extends keyof AllTypes>(uid: K, params: FindParams<AllTypes[K]>): Promise<AllTypes[K][]>;
+  create<K extends keyof AllTypes>(uid: K, params: CreateParams<AllTypes[K]>): Promise<AllTypes[K]>;
   createMany<K extends keyof AllTypes>(
     uid: K,
     params: CreateManyParams<AllTypes[K]>
   ): Promise<{ count: number }>;
 
-  update<K extends keyof AllTypes>(uid: K, params: any): Promise<any>;
+  update<K extends keyof AllTypes>(uid: K, params: any): Promise<AllTypes[K]>;
   updateMany<K extends keyof AllTypes>(uid: K, params: any): Promise<{ count: number }>;
 
-  delete<K extends keyof AllTypes>(uid: K, params: any): Promise<any>;
+  delete<K extends keyof AllTypes>(uid: K, params: any): Promise<AllTypes[K]>;
   deleteMany<K extends keyof AllTypes>(uid: K, params: any): Promise<{ count: number }>;
 
   count<K extends keyof AllTypes>(uid: K, params: any): Promise<number>;
@@ -112,13 +116,13 @@ interface EntityManager {
   ): Promise<T[SK]>;
 }
 
-interface QueryFromContentType<T extends keyof AllTypes> {
-  findOne(params: FindParams<AllTypes[T]>): Promise<any>;
-  findMany(params: FindParams<AllTypes[T]>): Promise<any[]>;
-  findWithCount(params: FindParams<AllTypes[T]>): Promise<[any[], number]>;
-  findPage(params: FindParams<AllTypes[T]>): Promise<{ results: any[]; pagination: Pagination }>;
+export interface QueryFromContentType<T extends keyof AllTypes> {
+  findOne(params: FindParams<AllTypes[T]>): Promise<AllTypes[T]>;
+  findMany(params: FindParams<AllTypes[T]>): Promise<AllTypes[T][]>;
+  findWithCount(params: FindParams<AllTypes[T]>): Promise<[AllTypes[T][], number]>;
+  findPage(params: FindParams<AllTypes[T]>): Promise<{ results: AllTypes[T][]; pagination: Pagination }>;
 
-  create(params: CreateParams<AllTypes[T]>): Promise<any>;
+  create(params: CreateParams<AllTypes[T]>): Promise<AllTypes[T]>;
   createMany(params: CreateManyParams<AllTypes[T]>): Promise<{ count: number }>;
 
   update(params: any): Promise<any>;
diff --git a/node_modules/@strapi/database/lib/query/query-builder.js b/node_modules/@strapi/database/lib/query/query-builder.js
index 0d0bc1d..f778796 100644
--- a/node_modules/@strapi/database/lib/query/query-builder.js
+++ b/node_modules/@strapi/database/lib/query/query-builder.js
@@ -12,6 +12,7 @@ const createQueryBuilder = (uid, db) => {
     type: 'select',
     select: [],
     count: null,
+    sum: null,
     max: null,
     first: false,
     data: null,
@@ -78,6 +79,13 @@ const createQueryBuilder = (uid, db) => {
       return this;
     },
 
+    sum(sum = '*') {
+      state.type = 'sum';
+      state.sum = sum;
+
+      return this;
+    },
+
     max(column) {
       state.type = 'max';
       state.max = column;
@@ -194,7 +202,7 @@ const createQueryBuilder = (uid, db) => {
     },
 
     mustUseAlias() {
-      return ['select', 'count'].includes(state.type);
+      return ['select', 'count','sum','delete'].includes(state.type);
     },
 
     aliasColumn(key, alias) {
@@ -307,6 +315,12 @@ const createQueryBuilder = (uid, db) => {
           qb.count({ count: dbColumnName });
           break;
         }
+        case 'sum': {
+          const dbColumnName =
+            state.sum === '*' ? '*' : this.aliasColumn(helpers.toColumnName(meta, state.sum));
+          qb.sum({ sum: dbColumnName });
+          break;
+        }
         case 'max': {
           const dbColumnName = this.aliasColumn(helpers.toColumnName(meta, state.max));
           qb.max({ max: dbColumnName });
