diff --git a/node_modules/xendit-node/src/balance/balance.d.ts b/node_modules/xendit-node/src/balance/balance.d.ts
index f41a0c5..634573b 100644
--- a/node_modules/xendit-node/src/balance/balance.d.ts
+++ b/node_modules/xendit-node/src/balance/balance.d.ts
@@ -16,5 +16,5 @@ export = class Balance {
     Holding: AccountType;
     Tax: AccountType;
   };
-  getBalance(data: { accountType: AccountType }): Promise<object>;
+  getBalance(data: { accountType: AccountType,forUserID?: string }): Promise<object>;
 };
diff --git a/node_modules/xendit-node/src/ewallet/ewallet_charge.d.ts b/node_modules/xendit-node/src/ewallet/ewallet_charge.d.ts
index 052f6ef..b7fca86 100644
--- a/node_modules/xendit-node/src/ewallet/ewallet_charge.d.ts
+++ b/node_modules/xendit-node/src/ewallet/ewallet_charge.d.ts
@@ -1,9 +1,9 @@
-enum Currency {
+export enum Currency {
   IDR = 'IDR',
   PHP = 'PHP',
 }
 
-enum ChannelCode {
+export enum ChannelCode {
   ID_OVO = 'ID_OVO',
   ID_DANA = 'ID_DANA',
   ID_LINKAJA = 'ID_LINKAJA',
@@ -11,7 +11,7 @@ enum ChannelCode {
   PH_PAYMAYA = 'PH_PAYMAYA',
 }
 
-interface ChannelProps {
+export interface ChannelProps {
   mobileNumber?: string;
   successRedirectURL?: string;
   failureRedirectURL?: string;
@@ -19,7 +19,7 @@ interface ChannelProps {
   redeemPoints?: string;
 }
 
-interface Basket {
+export interface Basket {
   referenceID: string;
   name: string;
   category: string;
diff --git a/node_modules/xendit-node/src/qr_code/qr_code.d.ts b/node_modules/xendit-node/src/qr_code/qr_code.d.ts
index 98f05be..8c42f97 100644
--- a/node_modules/xendit-node/src/qr_code/qr_code.d.ts
+++ b/node_modules/xendit-node/src/qr_code/qr_code.d.ts
@@ -1,6 +1,6 @@
 import { XenditOptions } from '../xendit_opts';
 
-enum QrCodeTypes {
+export enum QrCodeTypes {
   Dynamic = 'DYNAMIC',
   Static = 'STATIC',
 }
@@ -20,8 +20,9 @@ export = class QrCode {
     callbackURL: string;
     amount?: number;
     metadata?: object;
+    forUserID?: string
   }): Promise<object>;
-  getCode(data: { externalID: string }): Promise<object>;
+  getCode(data: { externalID: string,forUserID?: string }): Promise<object>;
   getPayments(data: {
     externalID: string;
     from?: string;
diff --git a/node_modules/xendit-node/src/qr_code/qr_code.js b/node_modules/xendit-node/src/qr_code/qr_code.js
index 3143fd7..93c65a0 100644
--- a/node_modules/xendit-node/src/qr_code/qr_code.js
+++ b/node_modules/xendit-node/src/qr_code/qr_code.js
@@ -30,12 +30,18 @@ QrCode.prototype.createCode = function(data) {
     }
     Validate.rejectOnMissingFields(compulsoryFields, data, reject);
 
+    let headers = {
+      'Content-Type': 'application/json',
+      Authorization: Auth.basicAuthHeader(this.opts.secretKey),
+    };
+
+    if (data && data.forUserID) {
+      headers['for-user-id'] = data.forUserID;
+    }
+
     fetchWithHTTPErr(`${this.API_ENDPOINT}/`, {
       method: 'POST',
-      headers: {
-        'Content-Type': 'application/json',
-        Authorization: Auth.basicAuthHeader(this.opts.secretKey),
-      },
+      headers,
       body: JSON.stringify({
         external_id: data.externalID,
         type: data.type,
@@ -53,9 +59,17 @@ QrCode.prototype.getCode = function(data) {
   return promWithJsErr((resolve, reject) => {
     Validate.rejectOnMissingFields(['externalID'], data, reject);
 
+    let headers = {
+      Authorization: Auth.basicAuthHeader(this.opts.secretKey),
+    };
+
+    if (data && data.forUserID) {
+      headers['for-user-id'] = data.forUserID;
+    }
+
     fetchWithHTTPErr(`${this.API_ENDPOINT}/${data.externalID}`, {
       method: 'GET',
-      headers: { Authorization: Auth.basicAuthHeader(this.opts.secretKey) },
+      headers,
     })
       .then(resolve)
       .catch(reject);
